import numpy as np
from scipy.linalg import solve_banded

def findAndEvalSpline(x_data, y_data, x_testVals):
    n = len(x_data) - 1
    h = x_data[1] - x_data[0]
    A = np.zeros((3, n-1))
    b = np.zeros(n-1)
    
    for i in range(1, n):
        A[0, i-1] = h  # Upper diagonal (superdiagonal)
        A[1, i-1] = 4 * h  # Main diagonal
        A[2, i-1] = h  # Lower diagonal (subdiagonal)
        b[i-1] = 6 * (y_data[i+1] - 2*y_data[i] + y_data[i-1]) / h
    
    z = np.zeros(n+1)
    ab = np.zeros((3, n-1))
    ab[0, 1:] = A[0, :-1]  # superdiagonal (one element off the upper diagonal)
    ab[1] = A[1]  # main diagonal
    ab[2, :-1] = A[2, 1:]  # subdiagonal (one element off the lower diagonal)
    z[1:n] = solve_banded((1, 1), ab, b, overwrite_ab=True)
    
    def spline(x):
        for i in range(n):
            if x_data[i] <= x <= x_data[i+1]:
                h_i = x_data[i+1] - x_data[i]
                A = (x_data[i+1] - x) / h_i
                B = (x - x_data[i]) / h_i
                C = (y_data[i+1] / h_i) - (z[i+1] * h_i / 6)
                D = (y_data[i] / h_i) - (z[i] * h_i / 6)
                return (z[i] / 6 * (x_data[i+1] - x)**3 +
                        z[i+1] / 6 * (x - x_data[i])**3 +
                        C * (x - x_data[i]) +
                        D * (x_data[i+1] - x))
    
    spline_testVals = [spline(x) for x in x_testVals]
    return spline_testVals
